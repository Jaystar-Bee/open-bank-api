definitions:
  models.ADD_TO_BALANCE_BODY:
    properties:
      amount:
        type: number
      id:
        type: integer
      remarks:
        type: string
      transaction_pin:
        type: string
    required:
    - amount
    - id
    - transaction_pin
    type: object
  models.CHANGE_PASSWORD:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.CHANGE_PIN:
    properties:
      new_pin:
        type: string
      old_pin:
        type: string
    required:
    - new_pin
    - old_pin
    type: object
  models.DEPOSIT_BODY:
    properties:
      amount:
        type: number
    required:
    - amount
    type: object
  models.Error:
    properties:
      dev_reason:
        type: string
      message:
        type: string
    type: object
  models.HTTP_FILE_RESPONSE:
    properties:
      data:
        type: string
      message:
        type: string
    type: object
  models.HTTP_LOGIN_RESPONSE:
    properties:
      data:
        $ref: '#/definitions/models.USER'
      message:
        type: string
      token:
        type: string
    type: object
  models.HTTP_MESSAGE_ONLY_RESPONSE:
    properties:
      message:
        type: string
    type: object
  models.HTTP_REQUEST:
    properties:
      amount:
        type: number
      giver:
        type: integer
      remarks:
        type: string
    required:
    - amount
    - giver
    type: object
  models.HTTP_REQUEST_RESPONSE:
    properties:
      data:
        items:
          $ref: '#/definitions/models.HTTP_REQUEST_RESPONSE_ITEM'
        type: array
      message:
        type: string
    type: object
  models.HTTP_REQUEST_RESPONSE_ITEM:
    properties:
      amount:
        type: number
      created_at:
        type: string
      deleted_at:
        type: string
      giver:
        $ref: '#/definitions/models.USER'
      id:
        type: integer
      remarks:
        type: string
      requester:
        $ref: '#/definitions/models.USER'
      status:
        type: string
      updated_at:
        type: string
    required:
    - amount
    - giver
    type: object
  models.HTTP_TOKEN_RESPONSE:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  models.HTTP_TRANSACTION_BY_ID_RESPONSE:
    properties:
      data:
        $ref: '#/definitions/models.TRANSACTION-models_USER_RESPONSE'
      message:
        type: string
    type: object
  models.HTTP_TRANSACTION_DATA_RESPONSE:
    properties:
      current_page:
        type: number
      first_page:
        type: number
      has_next:
        type: boolean
      has_previous:
        type: boolean
      last_page:
        type: number
      next_page:
        type: number
      page_number:
        type: number
      per_page:
        type: number
      previous_page:
        type: number
      total_counts:
        type: number
      total_pages:
        type: number
      transactions:
        $ref: '#/definitions/models.TRANSACTION-models_USER_RESPONSE'
    type: object
  models.HTTP_TRANSACTION_LIST_RESPONSE:
    properties:
      data:
        $ref: '#/definitions/models.HTTP_TRANSACTION_DATA_RESPONSE'
      message:
        type: string
    type: object
  models.HTTP_USER_RESPONSE:
    properties:
      data:
        $ref: '#/definitions/models.USER_RESPONSE'
      message:
        type: string
    type: object
  models.HTTP_WALLET_RESPONSE:
    properties:
      data:
        $ref: '#/definitions/models.WALLET_REQUEST'
      message:
        type: string
    type: object
  models.OTP:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - otp
    type: object
  models.OTP_REQUEST:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    type: object
  models.RESET_PASSWORD:
    properties:
      email:
        type: string
      otp:
        type: string
      password:
        type: string
    required:
    - email
    - otp
    - password
    type: object
  models.RESET_PIN:
    properties:
      otp:
        type: string
      pin:
        type: string
    required:
    - otp
    - pin
    type: object
  models.TRANSACTION-models_USER_RESPONSE:
    properties:
      amount:
        type: number
      channel:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      receiver:
        $ref: '#/definitions/models.USER_RESPONSE'
      receiver_wallet:
        type: integer
      remarks:
        type: string
      sender:
        $ref: '#/definitions/models.USER_RESPONSE'
      sender_wallet:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    required:
    - amount
    - receiver
    - receiver_wallet
    - sender
    - sender_wallet
    - status
    type: object
  models.USER:
    properties:
      account_is_deactivated:
        type: boolean
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_verified:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      tag:
        type: string
      transaction_pin:
        type: string
      updated_at:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - tag
    - transaction_pin
    type: object
  models.USER_EDIT:
    properties:
      avatar:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      tag:
        type: string
    required:
    - first_name
    - last_name
    - tag
    type: object
  models.USER_LOGIN:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.USER_REQUEST:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      tag:
        type: string
      transaction_pin:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - tag
    - transaction_pin
    type: object
  models.USER_RESPONSE:
    properties:
      account_is_deactivated:
        type: boolean
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_verified:
        type: boolean
      last_name:
        type: string
      phone:
        type: string
      tag:
        type: string
      updated_at:
        type: string
    type: object
  models.WALLET_REQUEST:
    properties:
      balance:
        type: number
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
info:
  contact:
    email: jbayilara@gmail.com
    name: John Ayilara (Jaystar)
    url: https://github.com/Jaystar-Bee
  description: OPEN BANK API
  title: OPEN BANK API
  version: "1.0"
paths:
  /transactions:
    get:
      consumes:
      - application/json
      description: You can get user transaction list and the list are paginated, which
        is 10 transactions per page by default.
      parameters:
      - description: Page number
        in: query
        name: page_number
        type: integer
      - description: Transactions per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/models.HTTP_TRANSACTION_LIST_RESPONSE'
        "400":
          description: Check queries
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Unable to fetch transactions
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get user transaction list
      tags:
      - Transactions
  /transactions/{id}:
    get:
      consumes:
      - application/json
      description: You can get transaction by ID.
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/models.HTTP_TRANSACTION_BY_ID_RESPONSE'
        "400":
          description: Check queries
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Transaction not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Unable to fetch transaction
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get transaction by ID
      tags:
      - Transactions
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload File
      parameters:
      - description: Upload File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HTTP_FILE_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Upload File
      tags:
      - Upload
  /user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get user by Id.
      parameters:
      - description: User Id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User fetched successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get user by Id.
      tags:
      - User
  /user/change-password:
    patch:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: User Password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.CHANGE_PASSWORD'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Change user password.
      tags:
      - User
  /user/change-pin:
    patch:
      consumes:
      - application/json
      description: Change user pin.
      parameters:
      - description: User Pin
        in: body
        name: pin
        required: true
        schema:
          $ref: '#/definitions/models.CHANGE_PIN'
      produces:
      - application/json
      responses:
        "200":
          description: User fetched successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Change user pin.
      tags:
      - User
  /user/edit:
    put:
      consumes:
      - application/json
      description: Edit User
      parameters:
      - description: Edit User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.USER_EDIT'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.HTTP_MESSAGE_ONLY_RESPONSE'
        "400":
          description: Unable to process request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Unable to process request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Edit User
      tags:
      - User
  /user/email/{email}:
    get:
      consumes:
      - application/json
      description: Get user by email.
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User fetched successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get user by email.
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Log user in to the application.
      parameters:
      - description: Log User In
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.USER_LOGIN'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/models.HTTP_LOGIN_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Log user in
      tags:
      - User
  /user/phone/{phone}:
    get:
      consumes:
      - application/json
      description: Get user by phone.
      parameters:
      - description: User Phone
        in: path
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User fetched successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get user by phone.
      tags:
      - User
  /user/renew:
    get:
      consumes:
      - application/json
      description: Renew user token.
      produces:
      - application/json
      responses:
        "200":
          description: Token renewd successfully
          schema:
            $ref: '#/definitions/models.HTTP_TOKEN_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Renew token
      tags:
      - User
  /user/reset-password:
    patch:
      consumes:
      - application/json
      description: Reset user password with otp
      parameters:
      - description: User Password & Otp
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.RESET_PASSWORD'
      produces:
      - application/json
      responses:
        "200":
          description: Password Reset successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Error'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Reset User Password
      tags:
      - User
  /user/reset-pin:
    patch:
      consumes:
      - application/json
      description: Reset user pin with otp
      parameters:
      - description: User Pin & Otp
        in: body
        name: pin
        required: true
        schema:
          $ref: '#/definitions/models.RESET_PIN'
      produces:
      - application/json
      responses:
        "200":
          description: Pin Reset successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Error'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Reset User Pin
      tags:
      - User
  /user/sendotp:
    post:
      consumes:
      - application/json
      description: Send OTP
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.OTP_REQUEST'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/models.HTTP_MESSAGE_ONLY_RESPONSE'
        "400":
          description: Invalid email
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Unable to process request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Send OTP
      tags:
      - User
  /user/signup:
    post:
      consumes:
      - application/json
      description: Onboard user to the application.
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.USER_REQUEST'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.HTTP_MESSAGE_ONLY_RESPONSE'
        "400":
          description: Check body
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create a user
      tags:
      - User
  /user/tag/{tag}:
    get:
      consumes:
      - application/json
      description: Get user by tag.
      parameters:
      - description: User Tag
        in: path
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User fetched successfully
          schema:
            $ref: '#/definitions/models.HTTP_USER_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get user by tag.
      tags:
      - User
  /user/toggle-account-deactivation:
    post:
      consumes:
      - application/json
      description: Toggle account activation
      parameters:
      - description: OTP
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/models.OTP'
      produces:
      - application/json
      responses:
        "200":
          description: Account activated successfully
          schema:
            $ref: '#/definitions/models.HTTP_LOGIN_RESPONSE'
        "400":
          description: Unable to process request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Unable to process request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Toggle account activation
      tags:
      - User
  /user/verify:
    post:
      consumes:
      - application/json
      description: Verify Account
      parameters:
      - description: OTP
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/models.OTP'
      produces:
      - application/json
      responses:
        "200":
          description: Account verified successfully
          schema:
            $ref: '#/definitions/models.HTTP_LOGIN_RESPONSE'
        "400":
          description: Unable to process request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Unable to process request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Verify Account
      tags:
      - User
  /wallet:
    get:
      consumes:
      - application/json
      description: Get Wallet
      produces:
      - application/json
      responses:
        "200":
          description: wallet fetched successfully
          schema:
            $ref: '#/definitions/models.HTTP_WALLET_RESPONSE'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Wallet
      tags:
      - Wallet
  /wallet/deposit:
    post:
      consumes:
      - application/json
      description: Deposit money to your wallet
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DEPOSIT_BODY'
      produces:
      - application/json
      responses:
        "200":
          description: wallet updated successfully
          schema:
            $ref: '#/definitions/models.HTTP_TRANSACTION_BY_ID_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Deposit money
      tags:
      - Wallet
  /wallet/requests:
    get:
      consumes:
      - application/json
      description: Get the money request you made and also have. You can differentiate
        the get by adding type query to be GIVER OR REQUESTER
      parameters:
      - description: GIVER OR REQUESTER
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Request fetched successfully
          schema:
            $ref: '#/definitions/models.HTTP_REQUEST_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get request
      tags:
      - Wallet
    post:
      consumes:
      - application/json
      description: Request money from another user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.HTTP_REQUEST'
      produces:
      - application/json
      responses:
        "200":
          description: Request successfully
          schema:
            $ref: '#/definitions/models.HTTP_MESSAGE_ONLY_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Request money
      tags:
      - Wallet
  /wallet/requests/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a request
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HTTP_MESSAGE_ONLY_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a request
      tags:
      - Wallet
  /wallet/requests/{id}/confirm:
    post:
      consumes:
      - application/json
      description: Accept a user money request
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Request accepted successfully
          schema:
            $ref: '#/definitions/models.HTTP_REQUEST_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Accept a user money request
      tags:
      - Wallet
  /wallet/requests/{id}/reject:
    post:
      consumes:
      - application/json
      description: Reject a user money request
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Request rejected successfully
          schema:
            $ref: '#/definitions/models.HTTP_REQUEST_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Reject a user money request
      tags:
      - Wallet
  /wallet/send:
    post:
      consumes:
      - application/json
      description: Send money to another user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ADD_TO_BALANCE_BODY'
      produces:
      - application/json
      responses:
        "200":
          description: wallet updated successfully
          schema:
            $ref: '#/definitions/models.HTTP_TRANSACTION_BY_ID_RESPONSE'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Send money
      tags:
      - Wallet
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
